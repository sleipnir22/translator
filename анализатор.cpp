
#include <iostream>
#include <fstream>
#include <string.h>
using namespace std;

void f1(char), f2(char), f3(char), f4(char), f5(char), f6(char), f7(char), f8(char), f9(char), f10(char), f11(char), f12(char), f13(char), f14(char), f15(char), f16(char);
typedef void (*semf)(char);
const semf funcArr[] = { f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16 }; // Массив семантических функций
int i = 0; //– номер очередного символа входного текста;
int x = 0; //– распознанное целое число;
string st; //– накопленная строка символов или имя;
int typ; //– тип распознанной лексемы

const int M[6][9] =                 //Mатрица состояний
{   {1,2,3,-1,4,0,-1,-2,-1},        //O - -2 (Ошиб. заключ. состояние)
    {1,1,-1,-1,-1,-1,-1,-1,-1},     //F - -1 (Правиль. заключ. состояние)
    {5,2,-1,-1,-1,-1,-1,-1,-1},     //S -  0 (Нач. состояние)
    {-1,-1,-1,-1,-1,-1,-1,-1,-1},   //I -  1
    {4,4,4,4,-1,4,4,4,-2},          //C -  2
    {5,5,-2,-2,-2,-2,-2,-2,-2}      //A -  3 , T - 4 , D - 5
};

const string sw[]{ "for","while","if","end","begin","then", "else" }; //Массив служебных слов

int check_sw()
{
    int i = 0;
    while (i < sizeof(sw))
    {
        if (st == sw[i])
            return ++i;
        else
            i++;
    }
    return -1;
}

const int S[6][9] =                 //Матрица функций
{
    {1,3,4,5,6,4,5,7,8},        
    {2,2,9,9,9,9,9,9,9},     
    {4,11,12,12,12,12,12,12,12},     
    {13,13,13,14,13,13,13,13,13},   
    {15,15,15,15,16,15,15,15,10},          
    {4,4,10,10,10,10,10,10,10}
};
//typ – тип распознанной лексемы :
//0 – концевой символ «┴»;
//1 – имя,
//2 – целое число,
//3 – строка символов,
//11 – символ : =,
//40, …, 93 – другие символы языка, указан код ASCII,
//101, …, 200 – служебные слова языка,
//–1 – ошибка в лексеме.

const char T[] =                    //Матрица символов
{ 0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,  //1 - буква 
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,    //2 - цифра
6,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,    //3 - двоеточие
2,2,2,2,2,2,2,2,2,2,3,9,7,4,7,7,    //4 - равно
7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,    //5 - кавычка
1,1,1,1,1,1,1,1,1,1,1,7,7,7,7,7,    //6 - пробел
7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,    //7 - с
1,1,1,1,1,1,1,1,1,1,1,7,7,7,7,7};   //8 - др
                                    //9 - точка с запятой (конец)

//1. st: = C[i]; i: = i + 1; //Начало имени или служебного слова.
//2. st: = st + C[i]; i: = i + 1; //Продолжение имени или служебного слова.
//3. x: = ord(C[i]) - ord(’0’); i: = i + 1; //Начало числа.
//4. i: = i + 1;            //Пропуск символа входной строки.
//5. typ: = ord(C[i]); i: = i + 1; //Распознан символ языка.
//6. st: = ’’; i: = i + 1; //Начало строки символов.
//7. typ: = -1; i: = i + 1; //Ошибочный символ входной строки.
//8. typ: = 0;          //Концевой символ входной строки.
//9. . . .  //Сравнение st с таблицей служебных слов. При совпадении typ содержит номер служебного слова +100, при несовпадении – число 1.
//10. typ: = -1;        //Ошибка во входной строке.
//11. x: = x * 10 + ord(C[i]) - ord(’0’); i: = i + 1; //Продолжение числа.
//12. typ: = 2;          //Распознано число.
//13. typ: = ord(’ : ’);   //Распознан символ «:».
//14. typ: = 11; i: = i + 1; //Распознан символ «:=».
//15. st: = st + C[i]; i: = i + 1; //Продолжение строки символов.
//16. typ: = 3; i: = i + 1;  //Распознана строка символов.



void f1(char ch)
{
    st += ch; 
    i++;
    return;
}
void f2(char ch)
{
    st += ch;
    i++;
    return;
}
void f3(char ch)
{
    x = ch - '0';
    return;
}
void f4(char ch)
{
    i++;
    return;
}
void f5(char ch)
{
    typ = ch;
    cout << "Распознан символ языка '" << ch << "'" << endl;
    i++;
    return;
}
void f6(char ch)
{
    st = "";
    i++;
    return;
}
void f7(char ch)
{
    typ = -1;
    cout << "Распознан ошибочный символ '" << ch << "'" << endl;
    i++;
    return;
}
void f8(char ch)
{
    typ = 0;
    cout << "Распознан концевой символ входной строки" << endl;
    return;
}
void f9(char ch)
{
    int check = check_sw();
    if (check < 0)
    {
        typ = 1;
        cout << "Распознано имя " << st << endl;
    }
    else
    {
        typ = check + 100; 
        cout << "Распознано служебное слово " << st << endl;
    }
    st = "";
    return;
}

void f10(char ch)
{
    typ = -1;
    cout << "Ошибка во входной строке!" << endl;
    return;
}

void f11(char ch)
{
    x = x * 10 + ch - '0';
    return;
}

void f12(char ch)
{
    typ = 2;
    cout << "Распознано число " << x << endl;
    x = 0;
    return;
}
void f13(char ch)
{
    typ = ch;
    cout << "Распознан символ ':'" << endl;
    return;
}
void f14(char ch)
{
    typ = 11; 
    cout << "Распознан символ ':='" << endl;
    i++;
    return;
}
void f15(char ch)
{
    st += ch;
    i++;
    return;
}
void f16(char ch)
{
    typ = 3;
    i++;
    cout << "Распознана строка " << st << endl;
    st = "";
    return;
}


int main()
{
    setlocale(LC_ALL, "ru");
    const string path = "tfest.txt"; //Путь к файлу

    ifstream fin;
    fin.open(path);
    if (!fin.is_open())
    {
        cout << "Русские не сдаются!" << endl;
    }
    else
    {
        cout << "Есть контакт!" << endl;
        char ch; int j = 0, s = 0, k = 0;
        while (fin.get(ch))
        {
            if (T[ch] && ch >= 0 && ch < 128)
                j = T[ch];
            else j = 7;
            if (s >= 0)
            {
                j--;
                k = S[s][j];
                k--;
                s = M[s][j];
            }
            if (s >= -1 && k >= 0)
            {
                funcArr[k](ch);
                if (s == -1)
                    s = 0;
            }
            else
            {
                cout << "Строка завершилась с ошибкой!" << endl;
                fin.close();
                return 0;
            }
        }
    }
    fin.close();
}



